
#debug=true

# Available profiles: web
# spring.profiles.active=web

spring.jersey.type=servlet
server.servlet-path=/s

#spring.jpa.generate-ddl =true
# spring.jpa.hibernate.ddl-auto=create-drop
# spring.jpa.hibernate.hbm2ddl.auto=update
#javax.persistence.schema-generation.database.action=create

# ===============================
# = Logging ( dev)
# ===============================

logging.level.com.intuit.ceg.entities = DEBUG

# ===============================
# = DATA SOURCE ( dev)
# ===============================

# Set here configurations for the database connection

# Connection url for the database
# spring.datasource.url = jdbc:mysql://localhost:3306/test1?useSSL=false

spring.sharding.datasource1.url=jdbc:mysql://localhost:3306/test1
spring.sharding.datasource1.username=root
spring.sharding.datasource1.password=root
spring.sharding.datasource1.ddl-auto = update
spring.sharding.datasource1.driver-class-name=com.mysql.jdbc.Driver

spring.sharding.datasource2.url=jdbc:mysql://localhost:3306/test2
spring.sharding.datasource2.username=root
spring.sharding.datasource2.password=root
spring.sharding.datasource2.ddl-auto = update
spring.sharding.datasource2.driver-class-name=com.mysql.jdbc.Driver


# Username and password
#spring.datasource.username = root
#spring.datasource.password = root

# Keep the connection alive if idle for a long time (needed in production)
#pring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
# spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
# spring.jpa.hibernate.ddl-auto = update

# Naming strategy
# spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
